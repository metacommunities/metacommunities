/*Stu's query on repositories: how often repos are used
------------------------------------------------ */
SELECT RepoEvents, COUNT(*) AS Freq
FROM
(
    SELECT repository_name, COUNT(repository_name) AS RepoEvents
    FROM [githubarchive:github.timeline]
    GROUP BY repository_name
) MyTable
GROUP BY RepoEvents
ORDER BY Freq DESC

/*  Top 100 Repos by number of events */

SELECT repository_name, RepoEvents
FROM
(
    SELECT repository_name, COUNT(repository_name) AS RepoEvents
    FROM [githubarchive:github.timeline]
    GROUP BY repository_name
) MyTable
GROUP BY RepoEvents, repository_name
ORDER BY RepoEvents DESC
limit 100;


/*fork - pull requests
- only 1 month time window to deal with size of data
- 3
*/
SELECT
    ForkTable.repository_url,
    COUNT(DISTINCT ForkTable.url) AS f2p_number,
    AVG(PARSE_UTC_USEC(PullTable.created_at)-PARSE_UTC_USEC(ForkTable.created_at))/3600000000 AS f2p_interval_hour
FROM
    (SELECT
    url,
    repository_url,
    MIN(created_at) AS created_at
    FROM
    [githubarchive:github.timeline]
    WHERE type='ForkEvent'
    AND PARSE_UTC_USEC(created_at) >= PARSE_UTC_USEC('2012-04-01 00:00:00')
    AND PARSE_UTC_USEC(created_at) < PARSE_UTC_USEC('2012-05-01 00:00:00')
    GROUP BY
    repository_url,
    url)
AS ForkTable
INNER JOIN
    (SELECT
    repository_url,
    payload_pull_request_head_repo_html_url,
    MIN(created_at) AS created_at
    FROM
    [githubarchive:github.timeline]
    WHERE type='PullRequestEvent'
    AND PARSE_UTC_USEC(created_at) >= PARSE_UTC_USEC('2012-04-01 00:00:00')
    AND PARSE_UTC_USEC(created_at) < PARSE_UTC_USEC('2012-05-01 00:00:00')
    GROUP BY
    repository_url,
    payload_pull_request_head_repo_html_url)
AS PullTable
ON
    ForkTable.repository_url=PullTable.repository_url AND
    ForkTable.url=PullTable.payload_pull_request_head_repo_html_url
GROUP BY
ForkTable.repository_url
ORDER BY
f2p_number DESC



/* Pull request events, discrete pull requests, and merged pull requests - per repo
*/

SELECT payload_pull_request_base_repo_url, 
count(payload_pull_request_base_repo_url) as PullRequestEvents, 
count(distinct(payload_pull_request_id)) as PullRequests,
sum(IF(payload_pull_request_merged == 'true', 1, 0)) AS MergedPullRequests,
FROM [publicdata:samples.github_timeline]
WHERE type = 'PullRequestEvent' 
GROUP BY payload_pull_request_base_repo_url
ORDER BY PullRequests DESC
limit 1000;


/* attempting to construct the fork-pull request table*
the join method is clunky/

SELECT pulltable.repository_url,forktable.fork as forks, count(type) as pullrequests
FROM
//left join is all the pullrequest events
    (SELECT repository_url, type FROM
    [githubarchive:github.timeline]
    WHERE type='PullRequestEvent') as pulltable
JOIN
//right join is just the repos with > 1000 forks
//this limit can be changed by using JOIN EACH
    (SELECT repository_url, count(type) as fork
    FROM [githubarchive:github.timeline]
    WHERE (type='ForkEvent')
    GROUP BY repository_url
    having fork > 1000
    order by fork desc) as forktable
//the inner join is just repository_url
on pulltable.repository_url = forktable.repository_url
GROUP BY pulltable.repository_url, forks
order by forks
limit 100;


/* much simpler way to do fork-pullrequest table
using the sum(if ...) approach*/

select repository_url, SUM(IF(type='ForkEvent', 1,0)) as fork,
SUM(IF(type='PullRequestEvent', 1,0)) as pullrequest
from [githubarchive:github.timeline]
where (type='ForkEvent') or (type='PullRequestEvent')
group by repository_url
order by fork desc
limit 100;

/* trying to version of the Pull requests, merged pull request per repo with the fork events
Why doesn't it seem to work properly?*/

SELECT repository_url, payload_pull_request_base_repo_url, 
sum(if(type='ForkEvent', 1,0)) as ForkEvents,
count(payload_pull_request_base_repo_url) as PullRequestEvents, 
count(distinct(payload_pull_request_id)) as PullRequests,
sum(IF(payload_pull_request_merged == 'true', 1, 0)) AS MergedPullRequests,
FROM [githubarchive:github.timeline]
WHERE (type = 'PullRequestEvent') or
(type = 'ForkEvent')
GROUP EACH BY repository_url, payload_pull_request_base_repo_url
ORDER BY PullRequests DESC, ForkEvents DESC
limit 100;

/* Richard's latest wide pull request table
Really good one!
*/

SELECT payload_pull_request_base_repo_url, 
count(payload_pull_request_base_repo_url) as PullRequestEvents, 
count(distinct(payload_pull_request_id)) as DistinctPullRequests,
count(distinct(payload_pull_request_head_repo_url)) as DistinctHeadRepos,
sum(IF(payload_action = 'opened', 1, 0)) AS PullRequestOpenEvents,
sum(IF(payload_action = 'closed', 1, 0)) AS PullRequestCloseEvents,
sum(IF(payload_pull_request_head_repo_url == payload_pull_request_base_repo_url AND payload_action = 'opened', 1, 0)) AS IntraRepoPullRequestOpenEvents,
sum(IF(payload_pull_request_merged == 'true', 1, 0)) AS MergedPullRequests,
count(distinct(payload_pull_request_merged_by_login)) AS UsersWhoMerge,
sum(IF(payload_pull_request_merged_by_login == payload_pull_request_user_login, 1, 0)) AS PullRequestMergedBySameUser,
FROM [github_explore.timeline]
WHERE type = 'PullRequestEvent' 
GROUP EACH BY payload_pull_request_base_repo_url
ORDER BY PullRequestEvents DESC
limit 1000;

/* Looking for forks which have supplanted their parents
Start with finding the 200k fork repos which have the most PushEvents
This query excludes those created before 2012-03-12 
because we need their ForkEvent to be included in the data or we can't ascertain their parent.
Results have been saved as 200k_active_forks
*/

SELECT repository_url,
count(repository_url) AS PushEvents,
count(distinct(actor_attributes_login)) AS Pushers,
sum(IF(actor_attributes_login = repository_owner, 1, 0)) AS PushesByOwner,
min(repository_watchers) AS minWatchers,
max(repository_watchers) as maxWatchers,
min(repository_size) AS minSize,
max(repository_size) AS maxSize,
min(repository_forks) AS minForks,
max(repository_forks) AS maxForks,
min(repository_created_at) AS created_at,
max(created_at) AS last_push,
FROM [github_explore.timeline]
WHERE type = 'PushEvent' AND repository_fork = 'true' 
AND PARSE_UTC_USEC(repository_created_at) >= PARSE_UTC_USEC('2012-03-12 00:00:00') 
GROUP EACH BY repository_url
ORDER BY PushEvents Desc
LIMIT 200000

/*
This creates a table linking the active fork repos to their parent repos
Saved as active_forks_parents
*/

SELECT
ForkTable.fork_url, ParentTable.repository_url
FROM
 (SELECT
   repository_url AS fork_url,
  FROM [github_explore.200k_active_forks]
  GROUP EACH BY
   fork_url
   )
 AS ForkTable
 INNER JOIN EACH
 (SELECT
   repository_url, url
  FROM
   [githubarchive:github.timeline]
  WHERE type='ForkEvent'
  GROUP EACH BY
   repository_url, url)
 AS ParentTable
 ON
  ForkTable.fork_url=ParentTable.url 

/* This one uses the table linking forks to their parents
and produces a table of values for the parent repos
Saved as 200k_active_forks_parentdata
*/
SELECT Parent.repo AS parent_repo,
Parent.PushEvents,
Parent.Pushers,
Parent.PushesByOwner,
Parent.minWatchers,
Parent.maxWatchers,
Parent.minSize,
Parent.maxSize,
Parent.minForks,
Parent.maxForks,
Parent.created_at,
Parent.last_push,
FROM
	(SELECT repository_url AS repo,
	count(repository_url) AS PushEvents,
	count(distinct(actor_attributes_login)) AS Pushers,
	sum(IF(actor_attributes_login = repository_owner, 1, 0)) AS PushesByOwner,
	min(repository_watchers) AS minWatchers,
	max(repository_watchers) as maxWatchers,
	min(repository_size) AS minSize,
	max(repository_size) AS maxSize,
	min(repository_forks) AS minForks,
	max(repository_forks) AS maxForks,
	min(repository_created_at) AS created_at,
	max(created_at) AS last_push,
	FROM [github_explore.timeline]
	WHERE type = 'PushEvent'
	GROUP EACH BY repo)
AS Parent
INNER JOIN EACH 
	(SELECT ParentTable_repository_url AS parent
	FROM [github_explore.200k_fork_parent_relations]
	GROUP EACH BY parent)
AS parentstable
ON Parent.repo = parentstable.parent

/* Same as above but just want names of pushers
Extracted to ipython
*/
SELECT Parent.repo AS parent_repo,
Parent.PushEvents,
Parent.Pusher,
Parent.first_push,
Parent.last_push,
FROM
	(SELECT repository_url AS repo,
	actor_attributes_login AS pusher,
	count(repository_url) AS PushEvents,
	min(created_at) AS first_push,
	max(created_at) AS last_push,
	FROM [github_explore.timeline]
	WHERE type = 'PushEvent'
	GROUP EACH BY repo, pusher)
AS Parent
INNER JOIN EACH 
	(SELECT ParentTable_repository_url AS parent
	FROM [github_explore.200k_fork_parent_relations]
	GROUP EACH BY parent)
AS parentstable
ON Parent.repo = parentstable.parent


/* This query is to add information on pull requests made/received in relation to the forked repos (with the forked repo as head)
*/ 
SELECT PR.headurl AS HeadURL,
PR.baseurl AS BaseURL,
PR.PRUser AS PRUser,
PR.Events,
PR.OpenEvents,
PR.CloseEvents,
PR.DistinctPullRequests,
PR.Merged,
PR.SelfMerges,
PR.first_pr,
PR.last_pr,
FROM
	(SELECT payload_pull_request_head_repo_url AS headurl,
	payload_pull_request_base_repo_url AS baseurl,
	payload_pull_request_user_login AS PRUser, 
	count(payload_pull_request_head_repo_url) AS Events,
	sum(IF(payload_action = 'opened', 1, 0)) AS OpenEvents,
	sum(IF(payload_action = 'closed', 1, 0)) AS CloseEvents,
	count(DISTINCT(payload_pull_request_id)) AS DistinctPullRequests,
	sum(IF(payload_pull_request_merged == 'true', 1, 0)) AS Merged,
	sum(IF(payload_pull_request_merged_by_login == payload_pull_request_user_login, 1, 0 )) AS SelfMerges,
	max(created_at) AS last_PR,
	min(created_at) AS first_PR,
	FROM [github_explore.timeline]
	WHERE type = 'PullRequestEvent'
	GROUP EACH BY headurl, baseurl, PRUser)
AS PR
INNER JOIN EACH 
	(SELECT REGEXP_REPLACE(ForkTable_fork_url, 'https://github.com/', 'https://api.github.com/repos/') AS head
	FROM [github_explore.200k_fork_parent_relations]
	GROUP EACH BY head)
AS headtable
ON PR.headurl = headtable.head
ORDER BY HeadURL

/* This query is to add information on pull requests made/received in relation to the forked repos (with the forked repo as base)
saved as: 200k_active_forks_PRbase 
*/ 
SELECT PR.baseurl AS BaseURL,
PR.headurl AS HeadURL,
PR.PRUser AS PRUser,
PR.Events,
PR.OpenEvents,
PR.CloseEvents,
PR.DistinctPullRequests,
PR.Merged,
PR.SelfMerges,
PR.first_pr,
PR.last_pr,
FROM
	(SELECT payload_pull_request_head_repo_url AS headurl,
	payload_pull_request_base_repo_url AS baseurl,
	payload_pull_request_user_login AS PRUser, 
	count(payload_pull_request_head_repo_url) AS Events,
	sum(IF(payload_action = 'opened', 1, 0)) AS OpenEvents,
	sum(IF(payload_action = 'closed', 1, 0)) AS CloseEvents,
	count(DISTINCT(payload_pull_request_id)) AS DistinctPullRequests,
	sum(IF(payload_pull_request_merged == 'true', 1, 0)) AS Merged,
	sum(IF(payload_pull_request_merged_by_login == payload_pull_request_user_login, 1, 0 )) AS SelfMerges,
	max(created_at) AS last_PR,
	min(created_at) AS first_PR,
	FROM [github_explore.timeline]
	WHERE type = 'PullRequestEvent'
	GROUP EACH BY baseurl, headurl, PRUser)
AS PR
INNER JOIN EACH 
	(SELECT REGEXP_REPLACE(ForkTable_fork_url, 'https://github.com/', 'https://api.github.com/repos/') AS fork
	FROM [github_explore.200k_fork_parent_relations]
	GROUP EACH BY fork)
AS forktable
ON PR.baseurl = forktable.fork
ORDER BY BaseURL

/* This query is to add information on pull requests made/received in relation to the parent repos (with the parent repo as base)
saved as: 200k_active_parents_PRbase 
*/ 
SELECT PR.baseurl AS BaseURL,
PR.headurl AS HeadURL,
PR.PRUser AS PRUser,
PR.Events,
PR.OpenEvents,
PR.CloseEvents,
PR.DistinctPullRequests,
PR.Merged,
PR.SelfMerges,
PR.first_pr,
PR.last_pr,
FROM
	(SELECT payload_pull_request_head_repo_url AS headurl,
	payload_pull_request_base_repo_url AS baseurl,
	payload_pull_request_user_login AS PRUser, 
	count(payload_pull_request_head_repo_url) AS Events,
	sum(IF(payload_action = 'opened', 1, 0)) AS OpenEvents,
	sum(IF(payload_action = 'closed', 1, 0)) AS CloseEvents,
	count(DISTINCT(payload_pull_request_id)) AS DistinctPullRequests,
	sum(IF(payload_pull_request_merged == 'true', 1, 0)) AS Merged,
	sum(IF(payload_pull_request_merged_by_login == payload_pull_request_user_login, 1, 0 )) AS SelfMerges,
	max(created_at) AS last_PR,
	min(created_at) AS first_PR,
	FROM [github_explore.timeline]
	WHERE type = 'PullRequestEvent'
	GROUP EACH BY baseurl, headurl, PRUser)
AS PR
INNER JOIN EACH 
	(SELECT REGEXP_REPLACE(ParentTable_repository_url, 'https://github.com/', 'https://api.github.com/repos/') AS parent
	FROM [github_explore.200k_fork_parent_relations]
	GROUP EACH BY parent)
AS parenttable
ON PR.baseurl = parenttable.parent
ORDER BY BaseURL

/* This query is to add information on pull requests made/received in relation to the parent repos (with the parent repo as head)
saved as: 200k_active_parents_PRheads
*/ 
SELECT PR.headurl AS HeadURL,
PR.baseurl AS BaseURL,
PR.PRUser AS PRUser,
PR.Events,
PR.OpenEvents,
PR.CloseEvents,
PR.DistinctPullRequests,
PR.Merged,
PR.SelfMerges,
PR.first_pr,
PR.last_pr,
FROM
	(SELECT payload_pull_request_base_repo_url AS baseurl,
	payload_pull_request_head_repo_url AS headurl,
	payload_pull_request_user_login AS PRUser, 
	count(payload_pull_request_head_repo_url) AS Events,
	sum(IF(payload_action = 'opened', 1, 0)) AS OpenEvents,
	sum(IF(payload_action = 'closed', 1, 0)) AS CloseEvents,
	count(DISTINCT(payload_pull_request_id)) AS DistinctPullRequests,
	sum(IF(payload_pull_request_merged == 'true', 1, 0)) AS Merged,
	sum(IF(payload_pull_request_merged_by_login == payload_pull_request_user_login, 1, 0 )) AS SelfMerges,
	max(created_at) AS last_PR,
	min(created_at) AS first_PR,
	FROM [github_explore.timeline]
	WHERE type = 'PullRequestEvent'
	GROUP EACH BY headurl, baseurl, PRUser)
AS PR
INNER JOIN EACH 
	(SELECT REGEXP_REPLACE(ParentTable_repository_url, 'https://github.com/', 'https://api.github.com/repos/') AS parent
	FROM [github_explore.200k_fork_parent_relations]
	GROUP EACH BY parent)
AS parenttable
ON PR.headurl = parenttable.parent
ORDER BY BaseURL







/* This query is for the repo census and produces mostly counts of the number of events
Because there are so many repos it needs to be done in stages through the python API, which is slow...
*/
SELECT repository_url,
count(repository_url) AS Events,
count(distinct(actor_attributes_login)) AS Actors,
sum(if(type = 'PushEvent', 1, 0)) AS PushEvents,
sum(if(type = 'CreateEvent', 1, 0)) AS CreateEvents,
sum(if(type = 'CreateEvent' AND payload_ref_type = 'branch', 1, 0)) AS CreateBranchEvents,
sum(if(type = 'WatchEvent', 1, 0)) AS WatchEvents,
sum(if(type = 'IssueCommentEvent', 1, 0)) AS IssueCommentEvents,
sum(if(type = 'IssuesEvent', 1, 0)) AS IssuesEvents,
sum(if(type = 'ForkEvent', 1, 0)) AS ForkEvents,
sum(if(type = 'GistEvent', 1, 0)) AS GistEvents,
sum(if(type = 'PullRequestEvent', 1, 0)) AS PullRequestEvents,
sum(if(type = 'FollowEvent', 1, 0)) AS FollowEvents,
sum(if(type = 'GollumEvent', 1, 0)) AS GollumEvents,
sum(if(type = 'CommitCommentEvent', 1, 0)) AS CommitCommentEvents,
sum(if(type = 'PullRequestReviewCommentEvent', 1, 0)) AS PullRequestReviewCommentEvents,
sum(if(type = 'DeleteEvent', 1, 0)) AS DeleteEvents,
sum(if(type = 'MemberEvent', 1, 0)) AS MemberEvents,
sum(if(type = 'DownloadEvent', 1, 0)) AS DownloadEvents,
sum(if(type = 'PublicEvent', 1, 0)) AS PublicEvents,
sum(if(type = 'ForkApplyEvent', 1, 0)) AS ForkApplyEvents,
min(repository_created_at) AS repo_created,
max(repository_pushed_at) AS repo_pushed_at,
min(repository_watchers) AS minWatchers,
max(repository_watchers) as maxWatchers,
min(repository_size) AS minSize,
max(repository_size) AS maxSize,
min(repository_forks) AS minForks,
max(repository_forks) AS maxForks,
max(repository_language) AS language,
IF(max(repository_fork) = 'true', 1, 0) AS fork
FROM [github_explore.timeline]
GROUP EACH BY repository_url
ORDER BY Events Desc


/* The following queries are for looking at ongoing relationships between base and head repos through pull requests
I've saved most or all of the results as tables, because getting at the data I wanted involved layers of custom-made tables
The first one gets base/head pairs which are not intra-repo - cutting it off at 200k and ordering by pull request events 
means that we are left with pairs that have a minimum 4 events 
Saved as: PR_Base_Head_Pairs_NoIntra
*/
SELECT payload_pull_request_base_repo_url, payload_pull_request_head_repo_url, count(payload_pull_request_head_repo_url) AS pullrequestevents, min(created_at) AS firstPR, max(created_at) as lastPR, count(distinct(payload_pull_request_id)) AS DistinctPullRequests, 
FROM [githubarchive:github.timeline]
WHERE type = "PullRequestEvent"  AND payload_pull_request_head_repo_url != payload_pull_request_base_repo_url
GROUP EACH BY  payload_pull_request_head_repo_url, payload_pull_request_base_repo_url
ORDER BY pullrequestevents DESC
LIMIT 200000

/* table of users who pushed to base repo of pair
saved as: PR_Base_repo_Push_By_User
*/
SELECT Base.baseurl AS BaseURL,
Base.actor AS BasePusher,
Base.PushEvents,
Base.first_push,
Base.last_push,
FROM
	(SELECT REGEXP_REPLACE(repository_url, 'https://github.com/', 'https://api.github.com/repos/' ) AS baseurl,
	actor, 
	count(repository_url) AS PushEvents,
	max(created_at) AS last_push,
	min(created_at) AS first_push,
	FROM [github_explore.timeline]
	WHERE type = 'PushEvent'
	GROUP EACH BY baseurl, actor)
AS Base
INNER JOIN EACH 
	(SELECT payload_pull_request_base_repo_url AS base
	FROM [github_explore.Base_Head_Pairs_NoIntra]
	GROUP EACH BY base)
AS basetable
ON Base.baseurl = basetable.base
ORDER BY BaseURL

/* table of users who pushed to head repo of pair
saved as: PR_Head_repo_Push_By_User
*/
SELECT Head.headurl AS HeadURL,
Head.actor AS HeadPusher,
Head.PushEvents,
Head.first_push,
Head.last_push,
FROM
	(SELECT REGEXP_REPLACE(repository_url, 'https://github.com/', 'https://api.github.com/repos/' ) AS headurl,
	actor, 
	count(repository_url) AS PushEvents,
	max(created_at) AS last_push,
	min(created_at) AS first_push,
	FROM [github_explore.timeline]
	WHERE type = 'PushEvent'
	GROUP EACH BY headurl, actor)
AS Head
INNER JOIN EACH 
	(SELECT payload_pull_request_head_repo_url AS head
	FROM [github_explore.Base_Head_Pairs_NoIntra]
	GROUP EACH BY head)
AS headtable
ON Head.headurl = headtable.head
ORDER BY HeadURL

/* table of pull requests (opens, closes, distincts) grouped by user and repo and whether they were merged plus more counts (self-merges) and times 
saved as: PR_Users_NoIntra
*/
SELECT PR.headurl AS HeadURL,
PR.baseurl AS BaseURL,
PR.PRUser AS PRUser,
PR.Events,
PR.OpenEvents,
PR.CloseEvents,
PR.DistinctPullRequests,
PR.Merged,
PR.SelfMerges,
PR.first_pr,
PR.last_pr,
FROM
	(SELECT payload_pull_request_head_repo_url AS headurl,
	payload_pull_request_base_repo_url AS baseurl,
	payload_pull_request_user_login AS PRUser, 
	count(payload_pull_request_head_repo_url) AS Events,
	sum(IF(payload_action = 'opened', 1, 0)) AS OpenEvents,
	sum(IF(payload_action = 'closed', 1, 0)) AS CloseEvents,
	count(DISTINCT(payload_pull_request_id)) AS DistinctPullRequests,
	sum(IF(payload_pull_request_merged == 'true', 1, 0)) AS Merged,
	sum(IF(payload_pull_request_merged_by_login == payload_pull_request_user_login, 1, 0 )) AS SelfMerges,
	max(created_at) AS last_PR,
	min(created_at) AS first_PR,
	FROM [github_explore.timeline]
	WHERE type = 'PullRequestEvent'
	GROUP EACH BY headurl, baseurl, PRUser)
AS PR
INNER JOIN EACH 
	(SELECT payload_pull_request_head_repo_url AS head
	FROM [github_explore.Base_Head_Pairs_NoIntra]
	GROUP EACH BY head)
AS headtable
ON PR.headurl = headtable.head
ORDER BY HeadURL

/*Looking at table of memberevents to see if users were added to base repo and when
saved as: PR_AddedUsers_NoIntra
*/
SELECT Base.baseurl AS BaseURL,
Base.AddedUser AS AddedUser,
Base.AddedAt AS AddedAt
FROM
	(SELECT REGEXP_REPLACE(repository_url, 'https://github.com/', 'https://api.github.com/repos/' ) AS baseurl,
	payload_member_login AS AddedUser, 
	min(created_at) AS AddedAt,
	FROM [github_explore.timeline]
	WHERE type = 'MemberEvent'
	GROUP EACH BY baseurl, AddedUser)
AS Base
INNER JOIN EACH 
	(SELECT payload_pull_request_base_repo_url AS base
	FROM [github_explore.Base_Head_Pairs_NoIntra]
	GROUP EACH BY base)
AS basetable
ON Base.baseurl = basetable.base
ORDER BY BaseURL

/*GHTorrent query - looking at name duplications and whether they are forks
*/
SELECT name, 
count(name) AS numprojects, 
sum(IF(forked_from > 0, 1, 0)) AS forks
FROM projects 
GROUP BY name 
ORDER BY numprojects desc

/*The $1800 query*/

    SELECT payload_pull_request_head_repo_url, 
    count(payload_pull_request_head_repo_url) as PullRequestEvents, 
    count(distinct(payload_pull_request_id)) as DistinctPullRequests,
    count(distinct(payload_pull_request_head_repo_url)) as DistinctHeadRepos,
    sum(IF(payload_action = 'opened', 1, 0)) AS PullRequestOpenEvents,
    sum(IF(payload_action = 'closed', 1, 0)) AS PullRequestCloseEvents,
    sum(IF(payload_pull_request_head_repo_url == payload_pull_request_base_repo_url AND payload_action = 'opened', 1, 0)) AS IntraRepoPullRequestOpenEvents,
    sum(IF(payload_pull_request_merged == 'true', 1, 0)) AS MergedPullRequests,
    count(distinct(payload_pull_request_merged_by_login)) AS UsersWhoMerge,
    sum(IF(payload_pull_request_merged_by_login == payload_pull_request_user_login, 1, 0)) AS PullRequestMergedBySameUser,
    min(created_at) AS FirstPullRequest,
    max(created_at) AS LastPullRequest,
    min(payload_pull_request_head_repo_created_at) AS HeadRepoCreated,
    max(payload_pull_request_head_repo_fork) AS Fork,
    max(payload_pull_request_base_repo_url) AS payload_pull_request_base_repo_url,
    FROM [github_explore.timeline]
    WHERE type = 'PullRequestEvent' AND payload_pull_request_base_repo_url = 'https://api.github.com/repos/zznate/intravert-ug'
    GROUP EACH BY payload_pull_request_head_repo_url
    ORDER BY PullRequestEvents DESC 
        LIMIT 5000000;

