/*Stu's query on repositories: how often repos are used
------------------------------------------------ */
SELECT RepoEvents, COUNT(*) AS Freq
FROM
(
    SELECT repository_name, COUNT(repository_name) AS RepoEvents
    FROM [githubarchive:github.timeline]
    GROUP BY repository_name
) MyTable
GROUP BY RepoEvents
ORDER BY Freq DESC

/*  Top 100 Repos by number of events */

SELECT repository_name, RepoEvents
FROM
(
    SELECT repository_name, COUNT(repository_name) AS RepoEvents
    FROM [githubarchive:github.timeline]
    GROUP BY repository_name
) MyTable
GROUP BY RepoEvents, repository_name
ORDER BY RepoEvents DESC
limit 100;


/*fork - pull requests
- only 1 month time window to deal with size of data
- 3
*/
SELECT
    ForkTable.repository_url,
    COUNT(DISTINCT ForkTable.url) AS f2p_number,
    AVG(PARSE_UTC_USEC(PullTable.created_at)-PARSE_UTC_USEC(ForkTable.created_at))/3600000000 AS f2p_interval_hour
FROM
    (SELECT
    url,
    repository_url,
    MIN(created_at) AS created_at
    FROM
    [githubarchive:github.timeline]
    WHERE type='ForkEvent'
    AND PARSE_UTC_USEC(created_at) >= PARSE_UTC_USEC('2012-04-01 00:00:00')
    AND PARSE_UTC_USEC(created_at) < PARSE_UTC_USEC('2012-05-01 00:00:00')
    GROUP BY
    repository_url,
    url)
AS ForkTable
INNER JOIN
    (SELECT
    repository_url,
    payload_pull_request_head_repo_html_url,
    MIN(created_at) AS created_at
    FROM
    [githubarchive:github.timeline]
    WHERE type='PullRequestEvent'
    AND PARSE_UTC_USEC(created_at) >= PARSE_UTC_USEC('2012-04-01 00:00:00')
    AND PARSE_UTC_USEC(created_at) < PARSE_UTC_USEC('2012-05-01 00:00:00')
    GROUP BY
    repository_url,
    payload_pull_request_head_repo_html_url)
AS PullTable
ON
    ForkTable.repository_url=PullTable.repository_url AND
    ForkTable.url=PullTable.payload_pull_request_head_repo_html_url
GROUP BY
ForkTable.repository_url
ORDER BY
f2p_number DESC



/* Pull request events, discrete pull requests, and merged pull requests - per repo
*/

SELECT payload_pull_request_base_repo_url, 
count(payload_pull_request_base_repo_url) as PullRequestEvents, 
count(distinct(payload_pull_request_id)) as PullRequests,
sum(IF(payload_pull_request_merged == 'true', 1, 0)) AS MergedPullRequests,
FROM [publicdata:samples.github_timeline]
WHERE type = 'PullRequestEvent' 
GROUP BY payload_pull_request_base_repo_url
ORDER BY PullRequests DESC
limit 1000;


/* attempting to construct the fork-pull request table*
the join method is clunky/

SELECT pulltable.repository_url,forktable.fork as forks, count(type) as pullrequests
FROM
//left join is all the pullrequest events
    (SELECT repository_url, type FROM
    [githubarchive:github.timeline]
    WHERE type='PullRequestEvent') as pulltable
JOIN
//right join is just the repos with > 1000 forks
//this limit can be changed by using JOIN EACH
    (SELECT repository_url, count(type) as fork
    FROM [githubarchive:github.timeline]
    WHERE (type='ForkEvent')
    GROUP BY repository_url
    having fork > 1000
    order by fork desc) as forktable
//the inner join is just repository_url
on pulltable.repository_url = forktable.repository_url
GROUP BY pulltable.repository_url, forks
order by forks
limit 100;


/* much simpler way to do fork-pullrequest table
using the sum(if ...) approach*/

select repository_url, SUM(IF(type='ForkEvent', 1,0)) as fork,
SUM(IF(type='PullRequestEvent', 1,0)) as pullrequest
from [githubarchive:github.timeline]
where (type='ForkEvent') or (type='PullRequestEvent')
group by repository_url
order by fork desc
limit 100;

/* trying to version of the Pull requests, merged pull request per repo with the fork events
Why doesn't it seem to work properly?*/

SELECT repository_url, payload_pull_request_base_repo_url, 
sum(if(type='ForkEvent', 1,0)) as ForkEvents,
count(payload_pull_request_base_repo_url) as PullRequestEvents, 
count(distinct(payload_pull_request_id)) as PullRequests,
sum(IF(payload_pull_request_merged == 'true', 1, 0)) AS MergedPullRequests,
FROM [githubarchive:github.timeline]
WHERE (type = 'PullRequestEvent') or
(type = 'ForkEvent')
GROUP EACH BY repository_url, payload_pull_request_base_repo_url
ORDER BY PullRequests DESC, ForkEvents DESC
limit 100;

/* Richard's latest wide pull request table
Really good one!
*/

SELECT payload_pull_request_base_repo_url, 
count(payload_pull_request_base_repo_url) as PullRequestEvents, 
count(distinct(payload_pull_request_id)) as DistinctPullRequests,
count(distinct(payload_pull_request_head_repo_url)) as DistinctHeadRepos,
sum(IF(payload_action = 'opened', 1, 0)) AS PullRequestOpenEvents,
sum(IF(payload_pull_request_head_repo_url == payload_pull_request_base_repo_url AND payload_action = 'opened', 1, 0)) AS IntraRepoPullRequestOpenEvents,
sum(IF(payload_pull_request_merged == 'true', 1, 0)) AS MergedPullRequests,
count(distinct(payload_pull_request_merged_by_login)) AS UsersWhoMerge,
sum(IF(payload_pull_request_merged_by_login == payload_pull_request_user_login, 1, 0)) AS PullRequestMergedBySameUser,
FROM [github_explore.timeline]
WHERE type = 'PullRequestEvent' 
GROUP EACH BY payload_pull_request_base_repo_url
ORDER BY PullRequestEvents DESC
limit 1000;

/* Looking for forks which have supplanted their parents
Start with finding the 10000 fork repos which have the most PushEvents
This query excludes those created before 2012-03-12 
because we need their ForkEvent to be included in the data or we can't ascertain their parent.
Results have been saved as 100k_active_forks
*/

SELECT repository_url,
count(repository_url) AS PushEvents,
count(distinct(actor_attributes_login)) AS Pushers,
sum(IF(actor_attributes_login = repository_owner, 1, 0)) AS PushesByOwner,
min(repository_watchers) AS minWatchers,
max(repository_watchers) as maxWatchers,
min(repository_size) AS minSize,
max(repository_size) AS maxSize,
min(repository_forks) AS minForks,
max(repository_forks) AS maxForks,
min(repository_created_at) AS created_at,
max(created_at) AS last_push,
FROM [github_explore.timeline]
WHERE type = 'PushEvent' AND repository_fork = 'true' 
AND PARSE_UTC_USEC(repository_created_at) >= PARSE_UTC_USEC('2012-03-12 00:00:00') 
GROUP EACH BY repository_url
ORDER BY PushEvents Desc
LIMIT 10000

/*
This creates a table linking the active fork repos to their parent repos
Saved as active_forks_parents
*/

SELECT
ForkTable.fork_url, ParentTable.repository_url
FROM
 (SELECT
   repository_url AS fork_url,
  FROM [github_explore.10k_active_forks]
  GROUP EACH BY
   fork_url
   )
 AS ForkTable
 INNER JOIN EACH
 (SELECT
   repository_url, url
  FROM
   [githubarchive:github.timeline]
  WHERE type='ForkEvent'
  GROUP EACH BY
   repository_url, url)
 AS ParentTable
 ON
  ForkTable.fork_url=ParentTable.url 

/* This one uses the table linking forks to their parents
and produces a table of values for the parent repos
*/
SELECT Parent.repo AS parent_repo,
Parent.PushEvents,
Parent.Pushers,
Parent.PushesByOwner,
Parent.minWatchers,
Parent.maxWatchers,
Parent.minSize,
Parent.maxSize,
Parent.minForks,
Parent.maxForks,
Parent.created_at,
Parent.last_push,
FROM
	(SELECT repository_url AS repo,
	count(repository_url) AS PushEvents,
	count(distinct(actor_attributes_login)) AS Pushers,
	sum(IF(actor_attributes_login = repository_owner, 1, 0)) AS PushesByOwner,
	min(repository_watchers) AS minWatchers,
	max(repository_watchers) as maxWatchers,
	min(repository_size) AS minSize,
	max(repository_size) AS maxSize,
	min(repository_forks) AS minForks,
	max(repository_forks) AS maxForks,
	min(repository_created_at) AS created_at,
	max(created_at) AS last_push,
	FROM [github_explore.timeline]
	WHERE type = 'PushEvent'
	GROUP EACH BY repo)
AS Parent
INNER JOIN EACH 
	(SELECT ParentTable_repository_url AS parent
	FROM [github_explore.active_forks_parents]
	GROUP EACH BY parent)
AS parentstable
ON Parent.repo = parentstable.parent

