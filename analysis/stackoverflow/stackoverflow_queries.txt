
/* gets first url per post
post_urls*/
SELECT REGEXP_EXTRACT(Body, "href=\"([^\"|^&]+)") as url, 
	count(Body) AS freq, 
	count(distinct(OwnerUserId)) AS Posters, 
	sum(if(PostTypeId = 2, 1, 0)) AS answers, 
	count(distinct(ParentID)) AS DistinctQuestions  
	FROM [stack_overflow.Posts] 
	GROUP EACH BY url, 
	ORDER BY freq DESC;
	
/* Move up to aggregating by domain
*/	

SELECT DOMAIN(url) AS domain,
sum(freq) AS freq,
sum(Posters) AS Posters,
sum(answers) AS Answers,
sum(DistinctQuestions) AS DistinctQuestions
FROM [stack_overflow.post_urls]
GROUP BY domain,
order by freq DESC

/* need more than domain - specifically sub-domains where present - but for some the subdomain is not necessary for identification (i.e. docs, wiki, etc.)
SELECT REGEXP_EXTRACT(url, "http://([^/]*)") AS domain,
sum(freq) AS freq,
sum(Posters) AS Posters,
sum(answers) AS Answers,
sum(DistinctQuestions) AS DistinctQuestions
FROM [stack_overflow.post_urls]
GROUP BY domain,
order by freq DESC


	
/* gets first github link per post 
github_links*/	
SELECT REGEXP_EXTRACT(Body, "://github.com(/[^/]*/[^/^\"]*)") as url, 
	count(Body) AS freq, 
	count(distinct(OwnerUserId)) AS Posters, 
	sum(if(PostTypeId = 2, 1, 0)) AS answers, 
	count(distinct(ParentID)) AS DistinctQuestions  
	FROM [stack_overflow.Posts] GROUP EACH BY url, 
	ORDER BY freq DESC;

SELECT REGEXP_EXTRACT(Body, "://github.com(/[^/\"]*/[^/^\"^\'^#]*)") as url, 
	count(Body) AS freq, 
	count(distinct(OwnerUserId)) AS Posters, 
	sum(if(PostTypeId = 2, 1, 0)) AS answers, 
	count(distinct(ParentID)) AS DistinctQuestions  
	FROM [stack_overflow.Posts] GROUP EACH BY url, 
	ORDER BY freq DESC;

	
#this is the best one for now	
SELECT REGEXP_EXTRACT(Body, "://github.com(/[^/\"]*/[^/^\"^\'^#^ ^<^)]*)") as url, 
	count(Body) AS freq, 
	count(distinct(OwnerUserId)) AS Posters, 
	sum(if(PostTypeId = 2, 1, 0)) AS answers, 
	count(distinct(ParentID)) AS DistinctQuestions  
	FROM [stack_overflow.Posts] GROUP EACH BY url, 
	ORDER BY freq DESC;	

	
	
	
	
	
	
	
#can' figure out how to get rid of .git at the end, can't escape the .	
SELECT REGEXP_EXTRACT(Body, "://github.com(/[^/\"]*/[^/^\"^\'^#^ ^<^)^[\b.git\b]]*)") as url, 
	count(Body) AS freq, 
	count(distinct(OwnerUserId)) AS Posters, 
	sum(if(PostTypeId = 2, 1, 0)) AS answers, 
	count(distinct(ParentID)) AS DistinctQuestions  
	FROM [stack_overflow.Posts] GROUP EACH BY url, 
	ORDER BY freq DESC;		
	
SELECT REGEXP_EXTRACT(Body, "://github.com(/[^/\"]*/[^/^\"^\'^#^ ^\<^)]*)") as url, 
	count(Body) AS freq, 
	count(distinct(OwnerUserId)) AS Posters, 
	sum(if(PostTypeId = 2, 1, 0)) AS answers, 
	count(distinct(ParentID)) AS DistinctQuestions  
	FROM [stack_overflow.Posts] GROUP EACH BY url, 
	ORDER BY freq DESC;	
	
SELECT REGEXP_EXTRACT(Body, "://github.com(/[^/]*/[^/^\"^\.]*)") as url, 
	count(Body) AS freq, 
	count(distinct(OwnerUserId)) AS Posters, 
	sum(if(PostTypeId = 2, 1, 0)) AS answers, 
	count(distinct(ParentID)) AS DistinctQuestions  
	FROM [stack_overflow.Posts] GROUP EACH BY url, 
	ORDER BY freq DESC;	

	
	SELECT REGEXP_EXTRACT(Body, "://github.com(/[^/]*/[:alnum:]*)") as url, 
	count(Body) AS freq, 
	count(distinct(OwnerUserId)) AS Posters, 
	sum(if(PostTypeId = 2, 1, 0)) AS answers, 
	count(distinct(ParentID)) AS DistinctQuestions  
	FROM [stack_overflow.Posts] GROUP EACH BY url, 
	ORDER BY freq DESC;

[:alnum:]	

	SELECT REGEXP_EXTRACT(Body, "://github.com(/[^/^\"]*/[^/^\"^\s^\.^\<]*)") as url, 
	count(Body) AS freq, 
	count(distinct(OwnerUserId)) AS Posters, 
	sum(if(PostTypeId = 2, 1, 0)) AS answers, 
	count(distinct(ParentID)) AS DistinctQuestions  
	FROM [stack_overflow.Posts] GROUP EACH BY url, 
	ORDER BY freq DESC;
	
	
#split the urls for github_links to get a repo name and the specific page (if any)
#get repo name
SELECT REGEXP_EXTRACT(url, "(/[^/]*/[^/]*)") AS repo
FROM [stack_overflow.github_links]




#this gets the whole part after repo name
SELECT REGEXP_EXTRACT(url, "/[^/]*/[^/]*(.*)") AS repo
FROM [stack_overflow.github_links]


#terminate regexp at 3rd / or ' - save what comes after seperately, with 3rd-4th / being most important
#this gets the first part after the repo name
SELECT REGEXP_EXTRACT(url, "/[^/]*/[^/]*/([^/]*)") AS repo
FROM [stack_overflow.github_links]
	
	
	
#need to catch the subdomain links by starting again with a different REGEXP, then transform them to match the standard format




#also deal with gists seperately





#then add a column to the organisation/repo table which counts the number of references on stackoverflow
#actually, make a new table which joins repo/organisation with stackoverflow? 


SELECT 
gittable.matchurl AS repo,
gittable.Pushes AS Pushes,
gittable.repository_organization AS repository_organization,
stacktable.Posts AS Posts,
stacktable.Posters AS Posters,
stacktable.Answers AS Answers,
stacktable.DistinctQuestions AS DistinctQuestions
FROM
	(SELECT SUBSTR(repository_url, 19, 500) AS matchurl,
	count(repository_url) AS Pushes,
	max(repository_organization) AS repository_organization
	FROM [github_explore.timeline]
	WHERE type = 'PushEvent'
	GROUP EACH BY matchurl)
AS gittable
INNER JOIN EACH 
	(SELECT url,
	freq AS Posts,
	Posters,
	answers AS Answers,
	DistinctQuestions
	FROM [stack_overflow.github_repo_links])
AS stacktable
ON gittable.matchurl = stacktable.url
ORDER BY Pushes DESC


#do above as an outer join so that it has ALL repositories? Add the repository_homepage domain as a field, Maybe group by organisation
#left outer join = resources exceeded, need to make two inner join tables and then outer join them on repo_name
#repos_linked_to_from_SO
SELECT 
gittable.matchurl AS repo,
gittable.Pushes AS Pushes,
gittable.Pushers AS Pushers,
gittable.repository_organization AS repository_organization,
gittable.repository_homepage_domain AS repository_homepage_domain,
gittable.MaxWatchers AS MaxWatchers,
gittable.MaxForks AS MaxForks,
stacktable.Posts AS repolinkPosts,
stacktable.Posters AS repolinkPosters,
stacktable.Answers AS repolinkAnswers,
stacktable.DistinctQuestions AS repolinkDistinctQuestions
FROM
	(SELECT SUBSTR(repository_url, 19, 500) AS matchurl,
	count(repository_url) AS Pushes,
	count(distinct(actor)) AS Pushers,
	max(repository_organization) AS repository_organization,
	max(DOMAIN(repository_homepage)) AS repository_homepage_domain,
	max(repository_watchers) AS MaxWatchers,
	max(repository_forks) AS MaxForks,
	FROM [github_explore.timeline]
	WHERE type = 'PushEvent'
	GROUP EACH BY matchurl)
AS gittable
INNER JOIN EACH 
	(SELECT url,
	freq AS Posts,
	Posters,
	answers AS Answers,
	DistinctQuestions
	FROM [stack_overflow.github_repo_links])
AS stacktable
ON gittable.matchurl = stacktable.url
ORDER BY MaxWatchers DESC


#this one for repo_homepage domains - need to exclude a bunch of very common domains shared by many repos (e.g. github.com) - these should be treated seperately
#repos_homepagedomain_linked_to_from_SO



#arrrrgh, the domain approach is no good because there are so many links to sub-domains
SELECT 
gittable.matchurl AS repo,
gittable.Pushes AS Pushes,
gittable.Pushers AS Pushers,
gittable.repository_organization AS repository_organization,
gittable.repository_homepage_domain AS repository_homepage_domain,
gittable.MaxWatchers AS MaxWatchers,
gittable.MaxForks AS MaxForks,
stacktable.Posts AS homepagedomainPosts,
stacktable.Posters AS homepagedomainPosters,
stacktable.Answers AS homepagedomainAnswers,
stacktable.DistinctQuestions AS homepagedomainDistinctQuestions
FROM
	(SELECT SUBSTR(repository_url, 19, 500) AS matchurl,
	count(repository_url) AS Pushes,
	count(distinct(actor)) AS Pushers,
	max(repository_organization) AS repository_organization,
	max(DOMAIN(repository_homepage)) AS repository_homepage_domain,
	max(repository_watchers) AS MaxWatchers,
	max(repository_forks) AS MaxForks,
	FROM [github_explore.timeline]
	WHERE type = 'PushEvent' AND domain(repository_homepage) != 'github.com' AND domain(repository_homepage) != 'github.io' 
	AND domain(repository_homepage) != 'twitter.com' AND domain(repository_homepage) != 'zend.com' AND domain(repository_homepage) != 'rhcloud.com' 
	AND domain(repository_homepage) != 'typo3.org'  AND domain(repository_homepage) != 'tutsplus.com' AND domain(repository_homepage) != 'google.com' AND domain(repository_homepage) != 'sourceforge.net'  
	GROUP EACH BY matchurl)
AS gittable
INNER JOIN EACH 
	(SELECT domain,
	freq AS Posts,
	Posters,
	answers AS Answers,
	DistinctQuestions
	FROM [stack_overflow.post_domains])
AS stacktable
ON gittable.repository_homepage_domain = stacktable.domain
ORDER BY MaxWatchers DESC

#try extracting everything from links between the 2nd and 3rd slash instead




#join the two stackoverflow-reference tables - actually this needs to be done locally as bigquery doesn't do full OUTER joins



/* still need to work out a way to handle the repos which have a homepage involving github.com/io or zend or one of the other aggregator type websites - at present they are excluded from the homepage-linking table
Going to need:
organizations_megatable2
orgs_and_their_repos
repos_linked_to_from_SO
repos_homepagedomain_linked_to_from_SO
*/